#+TITLE: Zetteldesk.el a Revision and Outlining tool built on top of Org-Roam

* Table of Contents                                                     :TOC:
- [[#introduction][Introduction]]
- [[#installation][Installation]]
- [[#debugging][Debugging]]
- [[#getting-started][Getting Started]]
- [[#keybindings][Keybindings]]
- [[#things-to-do][Things to do]]

* Introduction
  Welcome to zetteldesk.el, a small library I wrote on top of Org-Roam. Now you may ask, why this was written and what purpose does it fulfill. Well, I am not sure, there are quite a lot of reasons I wanted to do this, I can't say I wrote it for one in specific. But there were two main ideas. The first being that I wanted some way to filter down my zettelkasten while doing revision for uni exams. Org-roam has a lot of tools by default to manage your nodes, even if you have a lot of them. But I needed some more to have a more frictionless revision. It came out pretty good, and I did very easy revision of all the topics I wanted, at the time of writing it. The second is a quote I read from "How to Take Smart Notes" that sparked an interest in my mind, and when I finally got the time to look into it, I made this. The two, despite divergent goals, were able to be combined very easily when I finally got to the end result.

  This introduction is going to be way longer than needed as I like writing stuff and I want to explain how this all came to be. You can skip it if you just want to learn how to use this, but I would recommend reading it, to have an "organic" introduction to the idea.

  So, while rereading the excellent book "How to Take Smart Notes" by Sonke Ahrens (around like 8-9 months after picking the workflow up) to have a more detailed look in some details I might have ignored starting out, I noticed that one interesting thing that was mentioned (would love to leave the very quote here but its been a few months and I am not in the mood of trying to find that exact sentence) was the idea of taking your zettels and spreading them on your desk to look at multiple of them at once. I started thinking about it and I wrote this idea in an org file. 
  
  #+begin_quote
    A desktop, is the top surface of a desk, or in the digital world an area in a computer screen in which some people arrange their icons, similarly to how they would arrange stuff in their desk. Now if I had an irl zettelkasten, I know for sure that my desktop would be filled with little notes with various topic when studying something. So why shouldn't I have a digital desktop where I can spread all my notes and look at them one by one, when studying. Wouldn't that be handy?
  #+end_quote

  Thus begun my planning of all this. I was originally gonna call this zettelkasten-desktop.el, but that one was quite large, so I just shortened it to zetteldesk.el.

  This started out really slowly with me thinking how I was gonna implement that idea and how it was all gonna pan out. I started with thinking of existing solutions for something similar. For example, I considered customising [[https://github.com/nex3/perspective-el][perspective.el]] to suit my needs as that had the ability of creating "perspectives" in which you can only view certain buffers. I quickly dropped that in favour of writing something from scratch. I felt that if I do it from scratch it would work out better as I would be more knowledgeable of what I am doing. Also, it was less work, because if I tried to customise a pre-existing package to suit my needs I would need to really go deep into learning what it does. I already had to do this for org-roam to write my addons to it, and as I am not a developer, have limited knowledge of elisp and also limited time to work on this, I thought it would be better if I wrote something from scratch using vanilla emacs and org-roam. Maybe I was wrong, but its fine, this has been working well so far for me.

  First thing I looked at was what kind of predicate I was gonna define and with what criteria I was going to filter things. I tried to follow a rather simple idea to do this and not overcomplicate things. Essentially, I define a buffer-local variable and give it a default value. Then I define the predicate function that shows when a buffer is part of the zettelkasten desktop. A buffer will be part of the desktop only if the value of that variable in the buffer is not equal to the default. I started planning out things by filtering buffers like this, but as I was going to use this with org-roam nodes as well, and for viewing nodes you are doing them a misservice if you do not use the commands defined from org-roam for traversing the database, I ported everything over to work with nodes as well learning a lot about the insides of org-roam in the process. There are probably a million other ways to make a simple user-friendly predicate, but changing the value of a buffer local variable seemed fairly easy to me so I went for it.
  
  When this was happening, I was in the second semester during which I took notes with org-roam and the zettelkasten method. I was proud to say that I had digitalised mostly everything I had notes for and had developed a good workflow for working with these notes (if anyone's interested on the workflow, some parts of it are described over on the part of my literate emacs config concerning Org-roam which you can find [[https://github.com/Vidianos-Giannitsis/Dotfiles/blob/master/emacs/.emacs.d/libs/zettelkasten.org][here]] and I might mention some things to explain some design choices and some functions I have defined). But after some time, the exam period was starting. Having worked on some of my intial ideas for this during the christmas holidays, I was done with the basic filter functions for switch-to-buffer and org-roam-node-find filtered down to only show the buffers/nodes I selected. I was really happy with them, but I didn't really know how to continue after that. Then, I realised two important things

1. My zettelkasten, having grown a lot more since the only other exam period I had used it in, was a bit harder to navigate so that I could do my revision in it.
2. The ideas I was considering with the zetteldesk, might be able to help with that.

  So I started thinking how I could combine these two. Having ran out of ideas for things to do, I thought trying to automate my revision process would be a fun puzzle. I had also not implemented the original idea, not having an idea of how I was gonna do it, but I said lets move on and I will think of something. I defined a new way of adding files to the zetteldesk besides a single buffer or a single node. That was to add a node and all its backlinks. As someone who works with big index files to sort their topics, this was very helpful, as I could add the majority of notes on a subject with a single command. Being able to have an org-roam-node-find function that shows only the nodes I am interested in, combined with org-roam UI, graphing that, was already a powerful tool. But there was basically no automation, nor had I achieved my original idea yet. All I had was a makeshift tool to filter my switch-to-buffer and org-roam-node-find to specific things. That was useful, but I wasn't really satisfied, I had to keep going. While doing revision for the first lesson, I noted down everything I did in a seperate file and was then thinking how I could automate it.

  Slowly, things started coming together. I crafted a workflow which significantly eased revision for university and also managed to implement, at least as best I could, my original vision. Then I experimented a bit more. If this came out good, which it was looking to be so, I could use it for more general purpose studying. Therefore, I needed to handle org-files that were outside the org-roam directory, material handed in pdf form, web content and I even setup a way to handle Info buffers (as I read a lot of documentation through those and I figured it might be a good idea). I have used this for every exam of my current semester as of writing this (February 2022) and it has worked wonders to help me revise everything. Obviously, this is only good revision if the notes themselves are good, but having spent quite a bit of time during the semester trying to understand the topics and make good notes about them, I didn't fear about that part. And the system's automation works to help the process of reviewing only the notes I want in a lot of way.

  And as in the buffer that puts all of this together, I sort things with headings, I thought that maybe this could also be used as an outliner tool. I will look at how people do those and implement some stuff specifically for that, but for now, its not here. I think it might be usable for that purpose though anyways.

  This is where we currently are. The main other thing I want to do for this, is to play around a bit with [[https://github.com/nobiot/org-remark][org-remark]]. I believe that in such tool, the ability to highlight things and add margin notes to it might be really useful. In general I do not really use this right now, so it will take some time to do that, but I look forward to it. I also add small things to it in a rather regular basis, whenever I feel something is missing. The development of this, is very closely connected with my studying, so if I find something I can improve I will try to do so.

  And after this incredibly long, and possibly unnecessarily detailed introduction lets dive into what this package does.

* Installation
  This package is currently not on MELPA. If people like it I will try to upload it, but for now I just wanted to publish the workflow I built for my exams, in case it is useful to others. To install this, simply clone this repository locally and add zetteldesk.el to your load-path.

  For instructions on how to do that, refer to https://www.emacswiki.org/emacs/LoadPath 
  
* Debugging
  This code is tested only on my machine, so there may be unexpected errors. If you find one, I would appreciate if you filed an issue about it. But before doing that, make sure you try reproducing it with emacs -Q. As a convenience, I use the following code to setup package.el, org-roam and finally zetteldesk.el in an emacs -Q buffer so I can test with a clean slate.

  #+BEGIN_SRC elisp

    ;; Setup package.el
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Install and Setup Org-Roam
    ;; Set the org-roam directory to ~/org_roam as that is what I use, if
    ;; you need something different, change it before testing this
    (package-install 'org-roam)

    (add-hook 'after-init-hook 'org-roam-setup)
    (setq org-roam-v2-ack t)

    (use-package org-roam
      :config
      (setq org-roam-directory "~/org_roam"))

    ;; Load zetteldesk.el and turn on zetteldesk-mode to have a
    ;; functioning zetteldesk-scratch
    (load-file "~/Zetteldesk/zetteldesk.el")
    (zetteldesk-mode 1)

  #+END_SRC
  
* Getting Started
  With that out of the way, lets do a short introduction to some core features of the package. This only scratches the surface of what this package can do however. Its just a demonstration of some of the major features, with gifs in between for a better visual representation. For more detailed documentation check the [[https://github.com/Vidianos-Giannitsis/zetteldesk.el/wiki][Wiki]], or the doc-strings of the functions. Most of them (especially the ones that insert things to the zetteldesk-scratch buffer) have very long and detailed doc-strings, where I try to explain thoroughly what they do. 

  First things first, once you have the package in your load-path, you need to require and activate the global minor-mode zetteldesk-mode. This mode does some background work to create a buffer named \*zetteldesk-scratch\*. This essentially acts as your desktop. This is where you put everything really.

  So a sample config would be
  #+BEGIN_SRC elisp
    (require 'zetteldesk)
    (zetteldesk-mode 1)
  #+END_SRC

  For starters, we can look at how you add or remove an org-roam node from the zetteldesk. This is shown in the gifs below
  [[https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Adding_Zetteldesk.gif]]
  

  You typically start with ~zetteldesk-add-backlinks-to-desktop~ which is for bulk adding of nodes, adding a node and all its backlinks as its very helpful to add everything related to a subject and them some things that were missed can be added with  ~zetteldesk-add-node-to-desktop~ or some things that in the end don't belong there can be removed with ~zetteldesk-remove-node-from-desktop~. For bulk removing ~zetteldesk-remove-backlinks-from-desktop~ is the main function you use. The other thing displayed here is the filtered version of ~org-roam-node-find~, ~zetteldesk-node-find~ which filters to show only files in the zetteldesk.
  
[[https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Removing_Zetteldesk.gif]]

  With this, you can start working on your desktop. Unfortunately, I can't show you any real examples I have, as all my lesson nodes are in Greek which is illegible for most. So for demonstration purposes I have a small desktop on the topic of literate programming.

  [[https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Desktop.gif]]

  The first function shown is ~zetteldesk-insert-node-contents-without-link~, which prompts for a node and inserts its contents to the zetteldesk-scratch. It specifies its without a link, as the one I primarily use ~zetteldesk-insert-node-contents~ also inserts an ID link to that node in the scratch buffer. My typical workflow (described shortly below) includes me writing an outline of the subject, linking every subject I mention. These links are inserted with this function so their contents are added to the scratch. There is also ~zetteldesk-switch-to-scratch-buffer~ to open the scratch buffer in a split with the current buffer. The version that doesn't insert a link (shown in the gif) does that by default, but the original ~zetteldesk-insert-node-contents~ doesn't do that by default, so this function is generally useful. 

  Another thing I want to showcase is info buffers. Info buffers are unique in the way that there aren't multiple. There is a single persistent buffer for info. So besides the use of info buffers in the zetteldesk, for its own purposes, it needs to define a way to save the info buffers you want to be viewing. This is in my opinion useful even on its own and is also showcased in the below gif.

  [[https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Add_info_Zetteldesk.gif]]

  The function that does the work is ~zetteldesk-add-info-node-to-desktop~ (and of course there is an equivalent ~zetteldesk-remove-node-from-desktop~). But of course this wouldn't be complete if you couldn't get a view of all the info-nodes you have saved, which switches to the node you select. This feature is demonstrated here

  [[https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Info_Zetteldesk.gif]]

  This filter function is ~zetteldesk-info-goto-node~. Furthermore, I wouldn't consider this complete, if you couldn't insert a node you want to the zetteldesk-scratch besides switching to it in the info buffer. This is also possible with ~zetteldesk-insert-info-contents~

  https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Info_scratch.gif

  Besides the contents, it also drops a link so you can read the node in its context (in the info buffer).
  
  And of course, as I already had all the backbone, it was very easy to add similar functionalities expanding to all emacs buffers. The functions ~zetteldesk-add-to-desktop~ and ~zetteldesk-remove-from-desktop~ are what you expect them to be. Choose a buffer and add it to the zetteldesk. The filter function for these is ~zetteldesk-switch-to-buffer~. Below is a demonstrative gif of how the filtered switch-to-buffer looks.

  [[https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Buffers.gif]]

  Last thing I consider super useful to showcase, is how the system handles references you want to insert to the zetteldesk besides the aforementioned org-roam files and info buffers.

  Things I would consider perfectly reasonable ways to distribute information are org-mode files outside org-roam, pdf, rich text formats like MS Office and web pages. Actually, rich-text formats don't interface well with emacs, so I recommend converting them to pdf, and I don't have something for web pages as org-roam-protocol already does the work for me. It captures an org-roam file and I just add the org-roam file. 

  Through ~zetteldesk-insert-org-file-contents~ you can insert all your org mode files to the zetteldesk-scratch. It follows a similar logic to ~zetteldesk-insert-node-contents~ with a major difference that it can handle headings, as most org files use them (the org-roam one doesn't as its more rare to see org-roam files with headings, as they are typically small files). But that's enough talking, I will let the gif do the rest.

  https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Org_scratch.gif

  In this gif, I also display another useful feature all the zetteldesk-insert functions have. If you give them a C-u argument, they will also open the zetteldesk-scratch buffer in a split. 

  Lastly, for pdfs, you have the equivalent ~zetteldesk-insert-link-to-pdf~. This doesn't insert a pdf, as obviously that wouldn't be practical, but a link to it. The cool thing is that the link can point to a specific page in the pdf. Here is how it works.

  https://github.com/Vidianos-Giannitsis/zetteldesk.el/blob/master/demos/Pdf_scratch.gif
  
  Note that the above functions filter to only show the appropriate files (org files that are not in org-roam or pdfs respectively) and that if they are in the zetteldesk.

  And that's the core of the package, which I wanted to showcase. For more detailed docs and part of the workflow I use with this explained, do check the package's wiki. 
  
* Keybindings
  Keybindings in Emacs are a long discussion. I firmly believe that emacs is a tool which you can mold to your liking, and the fact that you can completely change all its keybindings with ease to those you like is a big part of that. I personally prefer evil style keybindings with Space as the global leader key. Someone else might like defaults, be inspired by defaults but change them a bit, or any other random thing.

  For this very reason, inside the package's source code, there is no keybinding definition. Its something that I believe you should decide by yourself. Ok, actually I am considering adding the keybindings and just not defining the prefix key, as besides the prefix key - which is strictly my personal preference - I believe the rest probably make sense for others as well, and even if they don't, by nature of emacs you can change them. Haven't decided fully yet, so for now I will keep everything unbound.

  However, if you just want some inspiration, I will leave the part of my config that sets up the zetteldesk keybindings below.

  #+BEGIN_SRC emacs-lisp

    (general-define-key
     :states 'normal
     :keymaps 'override
     :prefix "SPC z"
     "b" 'zetteldesk-switch-to-buffer
     "a" '(:ignore t :which-key "Add to Zetteldesk")
     "a b" 'zetteldesk-add-to-desktop
     "a n" 'zetteldesk-add-node-to-desktop
     "a i" 'zetteldesk-add-info-node-to-desktop
     "r" '(:ignore t :which-key "Remove from Zetteldesk")
     "r b" 'zetteldesk-remove-from-desktop
     "r n" 'zetteldesk-remove-node-from-desktop
     "r i" 'zetteldesk-remove-info-node-from-desktop
     "n" 'zetteldesk-node-find
     "s" 'zetteldesk-switch-to-scratch-buffer
     "i" '(:ignore t :which-key "Insert to Scratch Buffer")
     "i n" 'zetteldesk-insert-node-contents
     "i N" 'zetteldesk-insert-node-contents-without-link
     "i o" 'zetteldesk-insert-org-file-contents
     "i p" 'zetteldesk-insert-link-to-pdf
     "i i" 'zetteldesk-insert-info-contents)

    (general-define-key
     :states 'normal
     :keymaps 'org-mode-map
     :prefix ", z"
     "i" 'zetteldesk-node-insert
     "r" 'zetteldesk-remove-backlinks-from-desktop
     "b" 'zetteldesk-add-backlinks-to-desktop
     "p" 'zetteldesk-node-insert-if-poi-or-moc
     "s" 'zetteldesk-node-insert-sort-backlinks)

  #+END_SRC

  I use general to define all my keybindings, as I really like how easy it is to define stuff with it. As mentioned, my global leader key where most of my keybindings go is Space. z is the letter I have chosen for the zetteldesk keybindings (for obvious reasons) and luckily nothing else in my config really used it. Furthermore, some keybindings are meant to be ran in org-mode, so those are in an org-mode-map under , z. The comma is my org-mode specific leader key, so that is why these are in , z. 

* Things to do
  The main thing I am looking into doing is to fully revamp the README to include more visual examples as it was pointed out that its important and I agree. I also want to set up the wiki better, as that's where I will have the documentation, until I get it in texinfo format as well, which I plan doing after. Another important plan of mine is to set up better org-remark integration with this package as its something really interesting I haven't gone around to doing. 

  Other things I am thinking of are setting up the keybindings without defining a prefix key and looking more into outliner software and if there is something I want to implement from those.

  However, due to uni and life, I can't devote too much time on this, so development might go slow at times.
